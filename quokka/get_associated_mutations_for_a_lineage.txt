import Bio
import pandas as pd
import csv
import re

import argparse
import sys
import matplotlib.pyplot as plt

from Bio import SeqIO
from Bio.Seq import Seq
from Bio import AlignIO
from Bio.Align.AlignInfo import SummaryInfo

## this code takes a while to run
designation_index = Bio.SeqIO.index("designated_seqs.fasta", "fasta")

reference = SeqIO.read("reference_WUHAN.fasta.txt", "fasta")

def get_95_cns(seq_file,cns_threshold=0.95):
    alignment = AlignIO.read(seq_file, "fasta")
    info = SummaryInfo(alignment)
    cns =  info.gap_consensus(
    threshold=cns_threshold, 
    ambiguous='N')
    return cns

def get_sequences_mutations(lineage_of_interest, designation_index, reference): 
	# supply lineage of interest as a string
  
    sequence_ID_list = []
    
    lineage_sequences= {}
    with open("lineages.csv","r") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row["lineage"] == str(lineage_of_interest): 
                lineage_sequences[row["taxon"]] = row
                                
    for row in lineage_sequences:
        sequence_ID_list.append(row)
    ### output of list of sequence_IDs for the given lineage
    
    lineage_index = Bio.Align.MultipleSeqAlignment([])
    for sequence in designation_index: ## for a sequence in the indexed sequences
        if sequence in sequence_ID_list: ## is this sequence in the ID list? 
            lineage_index.append(designation_index[sequence]) ## if it is, add the sequence to the list
    
    
    info = SummaryInfo(lineage_index)
    consensus_sequence =  info.gap_consensus(
    threshold=0.95, 
    ambiguous='N')

    # calculate the 95% consensus sequence

    nuc_position = []
    reference_nuc = []
    lineage_nuc = []

    for i in range(len(consensus_sequence)):
        if reference_sequence[i] != "N" and consensus_sequence[i] != "N":
            if consensus_sequence[i] != reference_sequence[i]:
                nuc_position.append(i)
                reference_nuc.append(reference_sequence[i])
                lineage_nuc.append(consensus_sequence[i])
    
    defining_mutations = pd.DataFrame(
    {'nucleotide_position': nuc_position,
     'reference_nucleotide': reference_nuc,
     'lineage_nucleotide': lineage_nuc
    })
 
    ## defining mutations dataframe with the position (index 0), as well as the change in nucleotide
   
    mutations_per_sequence = {}
    for sequence in lineage_index:
        mut_count = 0     

        for index, row in defining_mutations.iterrows(): 
            if row["lineage_nucleotide"] == sequence.seq[row["nucleotide_position"]]: 
                mut_count +=1
        mutations_per_sequence[sequence.name] = mut_count

 # the mutation count for that sequence makes up the other
    
    return(mutations_per_sequence, defining_mutations)

## output of the mutation counts, as well as a dictionary of all of the sequences + associated mutations


### i.e. AM.4

AM_4 = get_sequences_mutations(lineage_of_interest = "AM.4", designation_index = designation_index, reference = reference)

AM_4[0] # dictionary of sequences and number of lineage defining mutations present
AM_4[1] # dataframe of those lineage defining mutations 

